// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaAlquiler.Data;

#nullable disable

namespace TiendaAlquiler.Migrations
{
    [DbContext(typeof(TiendaAlquilerDBContext))]
    [Migration("20241119094315_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Alquiler", b =>
                {
                    b.Property<int>("AlquilerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlquilerId"));

                    b.Property<int>("CocheId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaAlquiler")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaDevolucion")
                        .HasColumnType("date");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlquilerId")
                        .HasName("PK__Alquiler__F28020B524CE1122");

                    b.HasIndex("CocheId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Alquiler", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Carroceria", b =>
                {
                    b.Property<int>("CarroceriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarroceriaId"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CarroceriaId")
                        .HasName("PK__Carrocer__EBEFDD7F34F2C214");

                    b.ToTable("Carroceria");

                    b.HasData(
                        new
                        {
                            CarroceriaId = 1,
                            Tipo = "Coupe"
                        },
                        new
                        {
                            CarroceriaId = 2,
                            Tipo = "Targa"
                        },
                        new
                        {
                            CarroceriaId = 3,
                            Tipo = "Descapotable"
                        },
                        new
                        {
                            CarroceriaId = 4,
                            Tipo = "Berlinetta"
                        },
                        new
                        {
                            CarroceriaId = 5,
                            Tipo = "HacthBack"
                        },
                        new
                        {
                            CarroceriaId = 6,
                            Tipo = "GT"
                        },
                        new
                        {
                            CarroceriaId = 7,
                            Tipo = "Urbano"
                        },
                        new
                        {
                            CarroceriaId = 8,
                            Tipo = "MicroCoche"
                        });
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.Property<int>("CocheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CocheId"));

                    b.Property<int>("AnioFabricacion")
                        .HasColumnType("int");

                    b.Property<int>("CarroceriaId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DecadaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstaAlquilado")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("CocheId")
                        .HasName("PK__Coche__9E980F6B023783F5");

                    b.HasIndex("CarroceriaId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DecadaId");

                    b.HasIndex("PaisId");

                    b.ToTable("Coche", (string)null);

                    b.HasData(
                        new
                        {
                            CocheId = 1,
                            AnioFabricacion = 1984,
                            CarroceriaId = 4,
                            ColorId = 1,
                            DecadaId = 6,
                            EstaAlquilado = false,
                            Marca = "Ferrari",
                            Modelo = "F40",
                            PaisId = 2,
                            PrecioAlquiler = 1500m
                        },
                        new
                        {
                            CocheId = 2,
                            AnioFabricacion = 1963,
                            CarroceriaId = 6,
                            ColorId = 3,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Aston Martin",
                            Modelo = "DB5",
                            PaisId = 4,
                            PrecioAlquiler = 3000m
                        },
                        new
                        {
                            CocheId = 3,
                            AnioFabricacion = 1970,
                            CarroceriaId = 6,
                            ColorId = 6,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Porsche",
                            Modelo = "911",
                            PaisId = 5,
                            PrecioAlquiler = 2000m
                        },
                        new
                        {
                            CocheId = 4,
                            AnioFabricacion = 1955,
                            CarroceriaId = 4,
                            ColorId = 1,
                            DecadaId = 3,
                            EstaAlquilado = false,
                            Marca = "Ferrari",
                            Modelo = "250 GTO",
                            PaisId = 2,
                            PrecioAlquiler = 300m
                        },
                        new
                        {
                            CocheId = 5,
                            AnioFabricacion = 1958,
                            CarroceriaId = 3,
                            ColorId = 2,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Jaguar",
                            Modelo = "E-Type",
                            PaisId = 4,
                            PrecioAlquiler = 250m
                        },
                        new
                        {
                            CocheId = 6,
                            AnioFabricacion = 1980,
                            CarroceriaId = 3,
                            ColorId = 3,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Rolls Royce",
                            Modelo = "Silver Cloud",
                            PaisId = 3,
                            PrecioAlquiler = 400m
                        },
                        new
                        {
                            CocheId = 7,
                            AnioFabricacion = 1999,
                            CarroceriaId = 5,
                            ColorId = 4,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Subaru",
                            Modelo = "Impreza WRX",
                            PaisId = 7,
                            PrecioAlquiler = 120m
                        },
                        new
                        {
                            CocheId = 8,
                            AnioFabricacion = 1955,
                            CarroceriaId = 2,
                            ColorId = 5,
                            DecadaId = 6,
                            EstaAlquilado = false,
                            Marca = "Mercedes-Benz",
                            Modelo = "300 SL",
                            PaisId = 5,
                            PrecioAlquiler = 350m
                        },
                        new
                        {
                            CocheId = 9,
                            AnioFabricacion = 1966,
                            CarroceriaId = 7,
                            ColorId = 8,
                            DecadaId = 6,
                            EstaAlquilado = false,
                            Marca = "Austin",
                            Modelo = "Mini Cooper",
                            PaisId = 4,
                            PrecioAlquiler = 100m
                        },
                        new
                        {
                            CocheId = 10,
                            AnioFabricacion = 1967,
                            CarroceriaId = 6,
                            ColorId = 1,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Ford",
                            Modelo = "Mustang",
                            PaisId = 6,
                            PrecioAlquiler = 500m
                        },
                        new
                        {
                            CocheId = 11,
                            AnioFabricacion = 1969,
                            CarroceriaId = 6,
                            ColorId = 2,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Chevrolet",
                            Modelo = "Camaro",
                            PaisId = 6,
                            PrecioAlquiler = 450m
                        },
                        new
                        {
                            CocheId = 12,
                            AnioFabricacion = 1950,
                            CarroceriaId = 7,
                            ColorId = 8,
                            DecadaId = 3,
                            EstaAlquilado = false,
                            Marca = "Volkswagen",
                            Modelo = "Beetle",
                            PaisId = 5,
                            PrecioAlquiler = 100m
                        },
                        new
                        {
                            CocheId = 13,
                            AnioFabricacion = 1975,
                            CarroceriaId = 4,
                            ColorId = 5,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Alfa Romeo",
                            Modelo = "Giulia",
                            PaisId = 2,
                            PrecioAlquiler = 200m
                        },
                        new
                        {
                            CocheId = 14,
                            AnioFabricacion = 1992,
                            CarroceriaId = 5,
                            ColorId = 4,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Mazda",
                            Modelo = "RX-7",
                            PaisId = 7,
                            PrecioAlquiler = 300m
                        },
                        new
                        {
                            CocheId = 15,
                            AnioFabricacion = 1972,
                            CarroceriaId = 6,
                            ColorId = 6,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "BMW",
                            Modelo = "2002",
                            PaisId = 5,
                            PrecioAlquiler = 220m
                        },
                        new
                        {
                            CocheId = 16,
                            AnioFabricacion = 1957,
                            CarroceriaId = 7,
                            ColorId = 7,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Citroën",
                            Modelo = "2CV",
                            PaisId = 3,
                            PrecioAlquiler = 120m
                        },
                        new
                        {
                            CocheId = 17,
                            AnioFabricacion = 1973,
                            CarroceriaId = 6,
                            ColorId = 1,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Lancia",
                            Modelo = "Stratos",
                            PaisId = 2,
                            PrecioAlquiler = 600m
                        },
                        new
                        {
                            CocheId = 18,
                            AnioFabricacion = 1968,
                            CarroceriaId = 7,
                            ColorId = 2,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Fiat",
                            Modelo = "500",
                            PaisId = 2,
                            PrecioAlquiler = 150m
                        },
                        new
                        {
                            CocheId = 19,
                            AnioFabricacion = 1981,
                            CarroceriaId = 6,
                            ColorId = 3,
                            DecadaId = 6,
                            EstaAlquilado = false,
                            Marca = "DeLorean",
                            Modelo = "DMC-12",
                            PaisId = 6,
                            PrecioAlquiler = 800m
                        },
                        new
                        {
                            CocheId = 20,
                            AnioFabricacion = 1994,
                            CarroceriaId = 6,
                            ColorId = 4,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Toyota",
                            Modelo = "Supra",
                            PaisId = 7,
                            PrecioAlquiler = 400m
                        },
                        new
                        {
                            CocheId = 21,
                            AnioFabricacion = 1988,
                            CarroceriaId = 5,
                            ColorId = 6,
                            DecadaId = 6,
                            EstaAlquilado = false,
                            Marca = "Peugeot",
                            Modelo = "205 GTI",
                            PaisId = 3,
                            PrecioAlquiler = 180m
                        },
                        new
                        {
                            CocheId = 22,
                            AnioFabricacion = 1965,
                            CarroceriaId = 6,
                            ColorId = 5,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Renault",
                            Modelo = "Alpine A110",
                            PaisId = 3,
                            PrecioAlquiler = 300m
                        },
                        new
                        {
                            CocheId = 23,
                            AnioFabricacion = 1932,
                            CarroceriaId = 6,
                            ColorId = 3,
                            DecadaId = 1,
                            EstaAlquilado = false,
                            Marca = "Bugatti",
                            Modelo = "Type 35",
                            PaisId = 3,
                            PrecioAlquiler = 1000m
                        },
                        new
                        {
                            CocheId = 24,
                            AnioFabricacion = 1969,
                            CarroceriaId = 6,
                            ColorId = 1,
                            DecadaId = 5,
                            EstaAlquilado = false,
                            Marca = "Lamborghini",
                            Modelo = "Miura",
                            PaisId = 2,
                            PrecioAlquiler = 2000m
                        },
                        new
                        {
                            CocheId = 25,
                            AnioFabricacion = 1998,
                            CarroceriaId = 5,
                            ColorId = 4,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Mitsubishi",
                            Modelo = "Lancer Evolution VI",
                            PaisId = 7,
                            PrecioAlquiler = 250m
                        },
                        new
                        {
                            CocheId = 26,
                            AnioFabricacion = 1995,
                            CarroceriaId = 5,
                            ColorId = 5,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Nissan",
                            Modelo = "Skyline GT-R",
                            PaisId = 7,
                            PrecioAlquiler = 450m
                        },
                        new
                        {
                            CocheId = 27,
                            AnioFabricacion = 1959,
                            CarroceriaId = 3,
                            ColorId = 7,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Cadillac",
                            Modelo = "Eldorado",
                            PaisId = 6,
                            PrecioAlquiler = 600m
                        },
                        new
                        {
                            CocheId = 28,
                            AnioFabricacion = 1961,
                            CarroceriaId = 6,
                            ColorId = 3,
                            DecadaId = 4,
                            EstaAlquilado = false,
                            Marca = "Volvo",
                            Modelo = "P1800",
                            PaisId = 8,
                            PrecioAlquiler = 200m
                        },
                        new
                        {
                            CocheId = 29,
                            AnioFabricacion = 1991,
                            CarroceriaId = 6,
                            ColorId = 1,
                            DecadaId = 7,
                            EstaAlquilado = false,
                            Marca = "Honda",
                            Modelo = "NSX",
                            PaisId = 7,
                            PrecioAlquiler = 350m
                        });
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ColorId")
                        .HasName("PK__Color__8DA7674D8D39398E");

                    b.ToTable("Color", (string)null);

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            Nombre = "Rojo Ferrari"
                        },
                        new
                        {
                            ColorId = 2,
                            Nombre = "British Racing Green"
                        },
                        new
                        {
                            ColorId = 3,
                            Nombre = "Silver Ghost"
                        },
                        new
                        {
                            ColorId = 4,
                            Nombre = "Blue Subaru"
                        },
                        new
                        {
                            ColorId = 5,
                            Nombre = "Negro Medianoche"
                        },
                        new
                        {
                            ColorId = 6,
                            Nombre = "Amarillo"
                        },
                        new
                        {
                            ColorId = 7,
                            Nombre = "White Cream"
                        },
                        new
                        {
                            ColorId = 8,
                            Nombre = "Marron"
                        });
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Decada", b =>
                {
                    b.Property<int>("DecadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecadaId"));

                    b.Property<int>("AnioInicio")
                        .HasColumnType("int");

                    b.HasKey("DecadaId")
                        .HasName("PK__Decada__B60F61813E1A9096");

                    b.ToTable("Decada");

                    b.HasData(
                        new
                        {
                            DecadaId = 1,
                            AnioInicio = 1930
                        },
                        new
                        {
                            DecadaId = 2,
                            AnioInicio = 1940
                        },
                        new
                        {
                            DecadaId = 3,
                            AnioInicio = 1950
                        },
                        new
                        {
                            DecadaId = 4,
                            AnioInicio = 1960
                        },
                        new
                        {
                            DecadaId = 5,
                            AnioInicio = 1970
                        },
                        new
                        {
                            DecadaId = 6,
                            AnioInicio = 1980
                        },
                        new
                        {
                            DecadaId = 7,
                            AnioInicio = 1990
                        },
                        new
                        {
                            DecadaId = 8,
                            AnioInicio = 2000
                        });
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FotoId"));

                    b.Property<int>("CocheId")
                        .HasColumnType("int");

                    b.Property<string>("RutaAcceso")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FotoId")
                        .HasName("PK__Foto__4EA1C119D86B5C92");

                    b.HasIndex("CocheId");

                    b.ToTable("Foto", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaisId")
                        .HasName("PK__Pais__E30419353E3D377E");

                    b.ToTable("Pais", (string)null);

                    b.HasData(
                        new
                        {
                            PaisId = 1,
                            Nombre = "España"
                        },
                        new
                        {
                            PaisId = 2,
                            Nombre = "Italia"
                        },
                        new
                        {
                            PaisId = 3,
                            Nombre = "Francia"
                        },
                        new
                        {
                            PaisId = 4,
                            Nombre = "Reino Unido"
                        },
                        new
                        {
                            PaisId = 5,
                            Nombre = "Alemania"
                        },
                        new
                        {
                            PaisId = 6,
                            Nombre = "Estados Unidos"
                        },
                        new
                        {
                            PaisId = 7,
                            Nombre = "Japon"
                        },
                        new
                        {
                            PaisId = 8,
                            Nombre = "Holanda"
                        },
                        new
                        {
                            PaisId = 9,
                            Nombre = "Belgica"
                        },
                        new
                        {
                            PaisId = 10,
                            Nombre = "Portugal"
                        },
                        new
                        {
                            PaisId = 11,
                            Nombre = "Korea"
                        });
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Alquiler", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Coche", "Coche")
                        .WithMany("Alquilers")
                        .HasForeignKey("CocheId")
                        .IsRequired()
                        .HasConstraintName("FK_Alquiler_Coche");

                    b.HasOne("TiendaAlquiler.Models.Usuario", "Usuario")
                        .WithMany("Alquilers")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Alquiler_Usuario");

                    b.Navigation("Coche");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Carroceria", "Carroceria")
                        .WithMany("Coches")
                        .HasForeignKey("CarroceriaId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Carroceria");

                    b.HasOne("TiendaAlquiler.Models.Color", "Color")
                        .WithMany("Coches")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Color");

                    b.HasOne("TiendaAlquiler.Models.Decada", "Decada")
                        .WithMany("Coches")
                        .HasForeignKey("DecadaId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Decada");

                    b.HasOne("TiendaAlquiler.Models.Pais", "Pais")
                        .WithMany("Coches")
                        .HasForeignKey("PaisId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Pais");

                    b.Navigation("Carroceria");

                    b.Navigation("Color");

                    b.Navigation("Decada");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Foto", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Coche", "Coche")
                        .WithMany("Fotos")
                        .HasForeignKey("CocheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Foto_Coche");

                    b.Navigation("Coche");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Carroceria", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.Navigation("Alquilers");

                    b.Navigation("Fotos");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Color", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Decada", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Pais", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Usuario", b =>
                {
                    b.Navigation("Alquilers");
                });
#pragma warning restore 612, 618
        }
    }
}
