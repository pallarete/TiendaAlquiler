// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaAlquiler.Data;

#nullable disable

namespace TiendaAlquiler.Migrations
{
    [DbContext(typeof(TiendaAlquilerDBContext))]
    [Migration("20241106162021_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Alquiler", b =>
                {
                    b.Property<int>("AlquilerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlquilerId"));

                    b.Property<int>("CocheId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaAlquiler")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaDevolucion")
                        .HasColumnType("date");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlquilerId")
                        .HasName("PK__Alquiler__F28020B524CE1122");

                    b.HasIndex("CocheId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Alquiler", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Carroceria", b =>
                {
                    b.Property<int>("CarroceriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarroceriaId"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CarroceriaId")
                        .HasName("PK__Carrocer__EBEFDD7F34F2C214");

                    b.ToTable("Carroceria");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.Property<int>("CocheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CocheId"));

                    b.Property<int>("AnioFabricacion")
                        .HasColumnType("int");

                    b.Property<int>("CarroceriaId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DecadaId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaAlquilado")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaisFabricacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioAlquiler")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("CocheId")
                        .HasName("PK__Coche__9E980F6B023783F5");

                    b.HasIndex("CarroceriaId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DecadaId");

                    b.HasIndex("PaisFabricacionId");

                    b.ToTable("Coche", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ColorId")
                        .HasName("PK__Color__8DA7674D8D39398E");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Decada", b =>
                {
                    b.Property<int>("DecadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecadaId"));

                    b.Property<int>("AnioInicio")
                        .HasColumnType("int");

                    b.HasKey("DecadaId")
                        .HasName("PK__Decada__B60F61813E1A9096");

                    b.ToTable("Decada");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FotoId"));

                    b.Property<int>("CocheId")
                        .HasColumnType("int");

                    b.Property<string>("RutaAcceso")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FotoId")
                        .HasName("PK__Foto__4EA1C119D86B5C92");

                    b.HasIndex("CocheId");

                    b.ToTable("Foto", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.PaisFabricacion", b =>
                {
                    b.Property<int>("PaisFabricacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisFabricacionId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaisFabricacionId")
                        .HasName("PK__PaisFabr__E30419353E3D377E");

                    b.ToTable("PaisFabricacion", (string)null);
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Alquiler", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Coche", "Coche")
                        .WithMany("Alquilers")
                        .HasForeignKey("CocheId")
                        .IsRequired()
                        .HasConstraintName("FK_Alquiler_Coche");

                    b.HasOne("TiendaAlquiler.Models.Usuario", "Usuario")
                        .WithMany("Alquilers")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Alquiler_Usuario");

                    b.Navigation("Coche");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Carroceria", "Carroceria")
                        .WithMany("Coches")
                        .HasForeignKey("CarroceriaId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Carroceria");

                    b.HasOne("TiendaAlquiler.Models.Color", "Color")
                        .WithMany("Coches")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Color");

                    b.HasOne("TiendaAlquiler.Models.Decada", "Decada")
                        .WithMany("Coches")
                        .HasForeignKey("DecadaId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_Decada");

                    b.HasOne("TiendaAlquiler.Models.PaisFabricacion", "PaisFabricacion")
                        .WithMany("Coches")
                        .HasForeignKey("PaisFabricacionId")
                        .IsRequired()
                        .HasConstraintName("FK_Coche_PaisFabricacion");

                    b.Navigation("Carroceria");

                    b.Navigation("Color");

                    b.Navigation("Decada");

                    b.Navigation("PaisFabricacion");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Foto", b =>
                {
                    b.HasOne("TiendaAlquiler.Models.Coche", "Coche")
                        .WithMany("Fotos")
                        .HasForeignKey("CocheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Foto_Coche");

                    b.Navigation("Coche");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Carroceria", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Coche", b =>
                {
                    b.Navigation("Alquilers");

                    b.Navigation("Fotos");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Color", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Decada", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.PaisFabricacion", b =>
                {
                    b.Navigation("Coches");
                });

            modelBuilder.Entity("TiendaAlquiler.Models.Usuario", b =>
                {
                    b.Navigation("Alquilers");
                });
#pragma warning restore 612, 618
        }
    }
}
